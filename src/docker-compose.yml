services:
  postgres:
    build: postgres/
    image: postgres
    container_name: postgres
    user: ${USER}
    env_file: postgres/env/.env.prod.db
    restart: always
    ports:
      - "5432:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
    networks: 
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d ft_transcendence -U 42user"]
      interval: 10s
      timeout: 5s
      retries: 5
  redis:
    build: redis/
    image: redis
    container_name: redis
    user: ${USER}
    restart: always
    networks: 
      - backend
  gunicorn:
    build: site/
    image: gunicorn
    container_name: gunicorn
    user: ${USER}
    env_file: site/env/.env.backend
    restart: always
    networks: 
      - backend
    volumes:
      - static_volume:/home/${USER}/ft_transcendence/staticfiles
      - media_volume:/home/${USER}/ft_transcendence/media
    depends_on:
      - postgres
      - redis
  nginx:
    container_name: nginx
    image: nginx
    build: nginx/
    user: ${USER}
    ports:
      - 8080:8080
    restart: always
    expose:
      - 80
    networks: 
      - backend
    depends_on: 
      - gunicorn
    volumes:
      - static_volume:/home/${USER}/ft_transcendence/staticfiles
      - media_volume:/home/${USER}/ft_transcendence/media
  daphne:
    image: daphne
    build:
      context: ./
      dockerfile: daphne/Dockerfile
    container_name: daphne
    user: ${USER}
    env_file: site/env/.env.backend
    restart: always
    networks: 
      - backend
    depends_on: 
      - gunicorn
  # prometheus:
  #   build: monitoring/prometheus/
  #   image: prometheus
  #   user: ${USER}
  #   container_name: prometheus
  #   volumes:
  #      - prometheus:/prometheus
  #   command:
  #     - '--config.file=/etc/prometheus/prometheus.yml'
  #     - '--storage.tsdb.path=/prometheus'
  #     - '--web.console.libraries=/usr/share/prometheus/console_libraries'
  #     - '--web.console.templates=/usr/share/prometheus/consoles'
  #   networks:
  #     - backend
  #   ports:
  #     - 9090:9090
  # grafana:
  #   build: monitoring/grafana/
  #   image: grafana
  #   user: ${USER}
  #   container_name: grafana
  #   env_file: monitoring/.env.monitoring
  #   volumes:
  #       - grafana:/var/lib/grafana
  #   ports:
  #       - "3000:3000"
  #   restart: unless-stopped
  #   networks:
  #       - backend
  # postgres-exporter:
  #     build: monitoring/postgres-exporter
  #     image: postgres-exporter
  #     user: ${USER}
  #     container_name: postgres-exporter
  #     ports:
  #         - "9187:9187"
  #     env_file: postgres/env/.env.prod.db
  #     depends_on:
  #         prometheus:
  #             condition: service_started
  #         postgres:
  #             condition: service_healthy
  #     restart: unless-stopped
  #     networks:
  #         - backend
  # nginx-exporter:
  #   image: nginx/nginx-prometheus-exporter:latest
  #   user: ${USER}
  #   command:
  #     - '-nginx.scrape-uri=http://nginx:8080/stub_status'
  #   ports:
  #     - 9113:9113
  # node-exporter:
  #   image: prom/node-exporter:latest
  #   user: ${USER}
  #   container_name: node-exporter
  #   ports:
  #     - 9100:9100
  #   volumes:
  #     - /proc:/host/proc:ro
  #     - /sys:/host/sys:ro
  #     - /:/rootfs:ro
  #   command:
  #     - '--path.procfs=/host/proc'
  #     - '--path.sysfs=/host/sys'
  #     - '--collector.filesystem.ignored-mount-points="^/(sys|proc|dev|host|etc)($$|/)"'


volumes:
  grafana:
  postgres-exporter:
  prometheus:
  pg_data:
    driver: local
  static_volume:
    driver: local
  media_volume:
      driver: local

networks:
  backend:
    driver: bridge
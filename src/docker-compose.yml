services:
  # === DATABASE SERVICES ===
  postgres:
    image: postgres
    build:
      context: ./postgres
      args:
        HOST_USER: "${HOST_USER}"
        HOST_GROUP: "${HOST_GROUP}"
        HOST_UID: "${HOST_UID}"
        HOST_GID: "${HOST_GID}"
    restart: always
    container_name: postgres
    env_file: 
      - postgres/env/.env.prod.db
      - .env
    volumes:
      - pg_data:/var/lib/postgresql/data
    networks: 
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d ft_transcendence -U 42user"]
      interval: 10s
      timeout: 5s
      retries: 5

  # === BACKEND SERVICES ===
  gunicorn:
    build:
      context: site/
      args:
        HOST_USER: "${HOST_USER}"
        HOST_GROUP: "${HOST_GROUP}"
        HOST_UID: "${HOST_UID}"
        HOST_GID: "${HOST_GID}"
    image: gunicorn
    user: "${USER}"
    restart: always
    container_name: gunicorn
    env_file: 
      - site/env/.env.django
      - .env
    networks: 
      - backend
    volumes:
      - static_volume:/home/ft_transcendence/staticfiles
      - media_volume:/home/ft_transcendence/media
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/"]
      interval: 5s
      retries: 3
      start_period: 10s
      timeout: 5s
  daphne:
    image: daphne
    user: "${USER}"
    restart: always
    container_name: daphne
    build:
      context: ./
      dockerfile: daphne/Dockerfile
      args:
        HOST_USER: "${HOST_USER}"
        HOST_GROUP: "${HOST_GROUP}"
        HOST_UID: "${HOST_UID}"
        HOST_GID: "${HOST_GID}"
    env_file: 
      - site/env/.env.django
      - .env
    networks: 
      - backend
    depends_on: 
      gunicorn:
        condition: service_started
  
  redis:
    image: redis
    user: "${USER}"
    build:
      context: redis/
      args:
        HOST_USER: "${HOST_USER}"
        HOST_GROUP: "${HOST_GROUP}"
        HOST_UID: "${HOST_UID}"
        HOST_GID: "${HOST_GID}"
    restart: always
    container_name: redis
    env_file: 
      - .env
    networks: 
      - backend
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # === WEB SERVER SERVICES ===
  nginx:
    image: nginx
    build:
      context: nginx/
      args:
        HOST_USER: "${HOST_USER}"
        HOST_GROUP: "${HOST_GROUP}"
        HOST_UID: "${HOST_UID}"
        HOST_GID: "${HOST_GID}"
    user: "${USER}"
    restart: always
    container_name: nginx
    env_file: 
      - .env
    ports:
      - "8080:8080"
    networks: 
      - backend
    depends_on: 
      gunicorn:
        condition: service_healthy
    volumes:
      - static_volume:/home/ft_transcendence/staticfiles
      - media_volume:/home/ft_transcendence/media
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 10s
      timeout: 3s
      retries: 3

  # === MONITORING SERVICES ===
  prometheus:
    user: "${USER}"
    image: prometheus
    container_name: prometheus
    build:
      context: monitoring/prometheus/
      args:
        HOST_USER: "${HOST_USER}"
        HOST_GROUP: "${HOST_GROUP}"
        HOST_UID: "${HOST_UID}"
        HOST_GID: "${HOST_GID}"
    env_file: 
      - .env
    volumes:
       - prometheus:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - monitoring
    ports:
      - "9090:9090"

  grafana:
    user: "${USER}"
    image: grafana
    container_name: grafana
    build:  
      context: monitoring/grafana/
      args:
        HOST_USER: "${HOST_USER}"
        HOST_GROUP: "${HOST_GROUP}"
        HOST_UID: "${HOST_UID}"
        HOST_GID: "${HOST_GID}"
    env_file: 
      - .env
      - monitoring/.env.monitoring
    volumes:
        - grafana:/var/lib/grafana
    ports:
        - "3000:3000"
    restart: unless-stopped
    networks:
        - monitoring

  postgres-exporter:
    user: "${USER}"
    restart: unless-stopped
    image: postgres-exporter
    build: 
      context: monitoring/postgres-exporter
      args:
        HOST_USER: "${HOST_USER}"
        HOST_GROUP: "${HOST_GROUP}"
        HOST_UID: "${HOST_UID}"
        HOST_GID: "${HOST_GID}"
    container_name: postgres-exporter
    env_file: 
      - postgres/env/.env.prod.db
      - .env
    ports:
        - "9187:9187"
    depends_on:
        prometheus:
            condition: service_started
        postgres:
            condition: service_healthy
    networks:
        - monitoring

networks:
  backend:
    driver: bridge
  monitoring:
    driver: bridge

volumes:
  grafana:
  postgres-exporter:
  prometheus:
  pg_data:
    driver: local
  static_volume:
    driver: local
  media_volume:
    driver: local

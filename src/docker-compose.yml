services:
  postgres:
    build: postgres/
    image: postgres
    container_name: postgres
    user: ${USER}
    env_file: postgres/env/.env.prod.db
    restart: always
    ports:
      - "5432:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
    networks: 
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d ft_transcendence -U 42user"]
      interval: 10s
      timeout: 5s
      retries: 5
  redis:
    build: redis/
    image: redis
    container_name: redis
    user: ${USER}
    restart: always
    networks: 
      - backend
  gunicorn:
    build: site/
    image: gunicorn
    container_name: gunicorn
    user: ${USER}
    env_file: site/env/.env.backend
    restart: always
    networks: 
      - backend
    volumes:
      - static_volume:/home/${USER}/ft_transcendence/staticfiles
      - media_volume:/home/${USER}/ft_transcendence/media
    depends_on:
      - postgres
      - redis
  nginx:
    container_name: nginx
    image: nginx
    build: nginx/
    user: ${USER}
    ports:
      - 8080:8080
    restart: always
    expose:
      - 80
    networks: 
      - backend
    depends_on: 
      - gunicorn
    volumes:
      - static_volume:/home/${USER}/ft_transcendence/staticfiles
      - media_volume:/home/${USER}/ft_transcendence/media
  daphne:
    image: daphne
    build:
      context: ./
      dockerfile: daphne/Dockerfile
    container_name: daphne
    user: ${USER}
    env_file: site/env/.env.backend
    restart: always
    networks: 
      - backend
    depends_on: 
      - gunicorn

volumes:
  pg_data:
    driver: local
  static_volume:
    driver: local
  media_volume:
    driver: local

networks:
  backend:
    driver: bridge
